!function(){function e(){o.containerElement=document.createElement("div"),o.containerElement.setAttribute("id","tone-editor_container"),document.body.appendChild(o.containerElement),o.hasBeenInitialized=!0}function t(e){this.element=document.createElement("div"),this.element.className="tone-editor_component",this._component=e,this.component=e.get();for(parameterName in this.component)if("object"==typeof this.component[parameterName]){var t=this.component[parameterName],a=document.createElement("div");a.className="tone-editor_parameter-gui attribute-group";for(parameterName in this.component[parameterName])t[parameterName]=new n(parameterName,t[parameterName]),this.component[parameterName].updateValue(),console.log(t[parameterName]),a.append(t[parameterName])}else this.component[parameterName]=new n(parameterName,this.component[parameterName]),this.component[parameterName].updateValue()}function n(e,t){console.log(t),this.type=t.type||"slider",this.value=t.value,this.element='<div class="tone-editor_parameter-gui'+this.type+'"><span>'+this.parameterName+"</span><span>"+this.value+"</span></div>",this.updateValue=function(){},this.element.className="tone-editor_parameter-gui "+this.type}function a(t){this.hasBeenInitialized||e(),o.containerElement.appendChild(t)}var o={components:[],hasBeenInitialized:!1,add:function(e,n,r){for(var m=document.createDocumentFragment(),i=arguments,p=0;p<i.length;p++){console.log(arguments[p]);var s=new t(i[p]);o.components.push(s),m.appendChild(s.element)}return a(m),o},remove:function(e){for(var t=0;t<components.length;t++)Object.is(components[t],e);return o},set:function(e){return o}};Tone.Editor=o}();
function extend(s,t){for(var i in t)t.hasOwnProperty(i)&&(s[i]=t[i])}Node.prototype.hasClass=function(s){return this.classList?this.classList.contains(s):-1<this.className.indexOf(s)},Node.prototype.addClass=function(s){if(this.classList)this.classList.add(s);else if(!this.hasClass(s)){var t=this.className.split(" ");t.push(s),this.className=t.join(" ")}return this},Node.prototype.removeClass=function(s){if(this.classList)this.classList.remove(s);else{var t=this.className.split(" ");t.splice(t.indexOf(s),1),this.className=t.join(" ")}return this},Number.prototype.remap=function(s,t,i,e){var a=this;return a<s&&(a=s),a>t&&(a=t),(a-s)*(e-i)/(t-s)+i};var remap=function(s,t,i,e,a){return s<t&&(s=t),s>i&&(s=i),(s-t)*(a-e)/(i-t)+e};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
