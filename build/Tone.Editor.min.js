!function(){function e(){r.containerElement=document.createElement("div"),r.containerElement.setAttribute("id","tone-editor_container"),document.body.appendChild(r.containerElement),r.hasBeenInitialized=!0}function t(e){this.element=document.createElement("div"),this.element.className="tone-editor_component",this.toneComponent=e,this.flattenedComponent=e.get(),this.parameters=[];var t={};for(parameterName in this.toneComponent)t[parameterName]=o(parameterName,this.toneComponent[parameterName]);console.log(t)}function n(t){this.hasBeenInitialized||e(),r.containerElement.appendChild(t)}function o(e,t){if(t instanceof Tone){var n={Instrument:{baseClass:Tone.Instrument,classes:["AMSynth","DuoSynth","FMSynth","Instrument","MembraneSynth","MetalSynth","MonoSynth","Monophonic","NoiseSynth","PluckSynth","PolySynth","Sampler","Synth"]},Effect:{baseClass:Tone.Effect,classes:["AutoFilter","AutoPanner","AutoWah","BitCrusher","Chebyshev","Chorus","Convolver","Distortion","Effect","FeedbackDelay","FeedbackEffect","Freeverb","JCReverb","MidSideEffect","Phaser","PingPongDelay","PitchShift","StereoEffect","StereoFeedbackEffect","StereoWidener","StereoXFeedbackEffect","Tremolo","Vibrato"]},Source:{baseClass:Tone.Source,classes:["AMOscillator","BufferSource","FMOscillator","FatOscillator","GrainPlayer","MultiPlayer","Noise","OmniOscillator","Oscillator","PWMOscillator","Player","PulseOscillator","Source","UserMedia"]},Core:{baseClass:Tone.Core,classes:["AmplitudeEnvelope","Analyser","Compressor","CrossFade","EQ3","Envelope","FeedbackCombFilter","Filter","Follower","FrequencyEnvelope","Gate","LFO","Limiter","LowpassCombFilter","Merge","Meter","MidSideCompressor","MidSideMerge","MidSideSplit","Mono","MultibandCompressor","MultibandSplit","PanVol","Panner","Panner3D","ScaledEnvelope","Split","Volume"]}};for(toneCategoryName in n){var r=n[toneCategoryName];if(t instanceof r.baseClass){for(var a={category:toneCategoryName,type:toneCategoryName},s=0;s<r.classes.length;s++)t instanceof Tone[r.classes[s]]&&(i.type=r.classes[s]);var i=t.get();if("number"!=typeof i)for(propertyName in t)i=o(propertyName,t[propertyName]);a.value=i,console.log(a)}}return a}return!1}var r={components:[],hasBeenInitialized:!1,add:function(e,o,a){for(var s=document.createDocumentFragment(),i=arguments,l=0;l<i.length;l++){console.log(arguments[l]);var c=new t(i[l]);r.components.push(c),s.appendChild(c.element)}return n(s),r},remove:function(e){for(var t=0;t<components.length;t++)Object.is(components[t],e);return r},set:function(e){return r}};Tone.Editor=r}();
function extend(s,t){for(var i in t)t.hasOwnProperty(i)&&(s[i]=t[i])}Node.prototype.hasClass=function(s){return this.classList?this.classList.contains(s):-1<this.className.indexOf(s)},Node.prototype.addClass=function(s){if(this.classList)this.classList.add(s);else if(!this.hasClass(s)){var t=this.className.split(" ");t.push(s),this.className=t.join(" ")}return this},Node.prototype.removeClass=function(s){if(this.classList)this.classList.remove(s);else{var t=this.className.split(" ");t.splice(t.indexOf(s),1),this.className=t.join(" ")}return this},Number.prototype.remap=function(s,t,i,e){var a=this;return a<s&&(a=s),a>t&&(a=t),(a-s)*(e-i)/(t-s)+i};var remap=function(s,t,i,e,a){return s<t&&(s=t),s>i&&(s=i),(s-t)*(a-e)/(i-t)+e};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
