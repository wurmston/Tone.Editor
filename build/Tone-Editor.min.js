
function extend(s,t){for(var i in t)t.hasOwnProperty(i)&&(s[i]=t[i])}Node.prototype.hasClass=function(s){return this.classList?this.classList.contains(s):-1<this.className.indexOf(s)},Node.prototype.addClass=function(s){if(this.classList)this.classList.add(s);else if(!this.hasClass(s)){var t=this.className.split(" ");t.push(s),this.className=t.join(" ")}return this},Node.prototype.removeClass=function(s){if(this.classList)this.classList.remove(s);else{var t=this.className.split(" ");t.splice(t.indexOf(s),1),this.className=t.join(" ")}return this},Number.prototype.remap=function(s,t,i,e){var a=this;return a<s&&(a=s),a>t&&(a=t),(a-s)*(e-i)/(t-s)+i};var remap=function(s,t,i,e,a){return s<t&&(s=t),s>i&&(s=i),(s-t)*(a-e)/(i-t)+e};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
